name: iOS Tests

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  test:
    name: Run iOS Tests
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Resolve Swift Package Dependencies
        run: xcodebuild -resolvePackageDependencies -project emoji-map.xcodeproj

      - name: Install xcpretty
        run: gem install xcpretty

      - name: Determine Simulator Destination
        id: simulator
        run: |
          echo "Listing available simulators:"
          xcrun simctl list devices available

          # Parse the simulator list to find the first iPhone with its OS version
          OS_VERSION=""
          DEVICE_NAME=""
          while IFS= read -r line; do
            # Check for OS version header
            if [[ "$line" =~ --\ iOS\ ([0-9]+\.[0-9]+(\.[0-9]+)?)\ -- ]]; then
              OS_VERSION="${BASH_REMATCH[1]}"
            # Check for an iPhone simulator line under the current OS version
            elif [[ "$line" =~ ^[[:space:]]*(iPhone[^[:space:]]+[[:space:]][^[:space:]]+)[[:space:]]*\( ]]; then
              DEVICE_NAME="${BASH_REMATCH[1]}"
              # If we have both OS and device, stop here
              if [ -n "$OS_VERSION" ] && [ -n "$DEVICE_NAME" ]; then
                break
              fi
            fi
          done < <(xcrun simctl list devices available)

          if [ -z "$DEVICE_NAME" ] || [ -z "$OS_VERSION" ]; then
            echo "Failed to find an iPhone simulator with an OS version!" >&2
            exit 1
          fi

          DESTINATION="platform=iOS Simulator,name=$DEVICE_NAME,OS=$OS_VERSION"
          echo "Selected simulator: $DESTINATION"
          echo "destination=$DESTINATION" >> $GITHUB_OUTPUT

      - name: Build and test
        run: |
          xcodebuild test \
            -project emoji-map.xcodeproj \
            -scheme emoji-map \
            -destination "${{ steps.simulator.outputs.destination }}" \
            -resultBundlePath TestResults.xcresult \
            | xcpretty
        env:
          DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults.xcresult
          retention-days: 7
